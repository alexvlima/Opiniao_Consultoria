###################
### BIBLIOTECAS ###
###################

library(tidyverse)
library(googledrive)
library(lubridate)
library(readxl)
library(cluster) 
library(Rtsne)
library(rfm)
library(factoextra)
library(NbClust)

################
### DOWNLOAD ###
################

# Faz o download do arquivo no Google Drive#
# drive_download(file = "dados atendimento particular jan 2017 a mar 2021.csv", 
#                path = "Dados/base_atendimentos.csv")

###############
### DATASET ###
###############

# rm(list = ls())
# Leitura do arquivo no R #
df <- read.csv2("Dados/base_atendimentos.csv")
glimpse(df)

df$ValorTotalPago <- as.numeric(df$ValorTotalPago)

length(unique(df$CPFPaciente))

de_para <- read_excel("particular - pagamentos no ato.xlsx", range = "B10:D408")
glimpse(de_para)

colnames(de_para) <- c("Segmento", "Fonte_Pagadora", "Qtde")

outliers <- read_excel("outliers para exclusao.xlsx")
glimpse(outliers)

outliers <- 
  outliers %>%
  select(CPF)

categoria_exame <- read_excel("exames classificados.xlsx")
glimpse(categoria_exame)

################
### OUTLIERS ###
################

df <- 
  df %>%
  mutate(CPF = as.numeric(CPFPaciente)) %>%
  anti_join(outliers, by = "CPF") %>%
  filter(CPF>0, is.na(CPF) == FALSE)

# df %>%
#   filter(CPF %in% outliers$CPF)

rm(outliers)

######################
### SERIE TEMPORAL ###
######################

df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  group_by(ANOMES = as.numeric(paste0(year(Data),
                                      str_pad(month(Data), 
                                              width = 2, pad = "0")))) %>%
  dplyr::summarise(N = n()) %>%
  filter(ANOMES > 201700) %>%
  mutate(ANOMES = factor(ANOMES, labels = c("jan/17","fev/17","mar/17",
                                            "abr/17","mai/17","jun/17",
                                            "jul/17","ago/17","set/17",
                                            "out/17","nov/17","dez/17",
                                            "jan/18","fev/18","mar/18",
                                            "abr/18","mai/18","jun/18",
                                            "jul/18","ago/18","set/18",
                                            "out/18","nov/18","dez/18",
                                            "jan/19","fev/19","mar/19",
                                            "abr/19","mai/19","jun/19",
                                            "jul/19","ago/19","set/19",
                                            "out/19","nov/19","dez/19",
                                            "jan/20","fev/20","mar/20",
                                            "abr/20","mai/20","jun/20",
                                            "jul/20","ago/20","set/20",
                                            "out/20","nov/20","dez/20",
                                            "jan/21","fev/21","mar/21"))) %>%
  print(n = 60)

df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  group_by(ANOMES = as.numeric(paste0(year(Data),
                                      str_pad(month(Data), 
                                              width = 2, pad = "0")))) %>%
  summarise(N = n()) %>%
  filter(ANOMES > 201700) %>%
  mutate(ANOMES = factor(ANOMES, labels = c("jan/17","fev/17","mar/17",
                                            "abr/17","mai/17","jun/17",
                                            "jul/17","ago/17","set/17",
                                            "out/17","nov/17","dez/17",
                                            "jan/18","fev/18","mar/18",
                                            "abr/18","mai/18","jun/18",
                                            "jul/18","ago/18","set/18",
                                            "out/18","nov/18","dez/18",
                                            "jan/19","fev/19","mar/19",
                                            "abr/19","mai/19","jun/19",
                                            "jul/19","ago/19","set/19",
                                            "out/19","nov/19","dez/19",
                                            "jan/20","fev/20","mar/20",
                                            "abr/20","mai/20","jun/20",
                                            "jul/20","ago/20","set/20",
                                            "out/20","nov/20","dez/20",
                                            "jan/21","fev/21","mar/21"))) %>%
  ggplot(aes(x = ANOMES, y = N)) + 
  geom_col(fill = "darkblue") + 
  xlab("") + 
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1))

########################
### FONTES PAGADORAS ###
########################

fontes_pagadoras <- 
  df %>% 
  select(FontePagadora) 

fontes_pagadoras <- 
  data.frame(do.call('rbind', 
                     strsplit(as.character(fontes_pagadoras$FontePagadora),
                     ',',fixed=FALSE)))
glimpse(fontes_pagadoras)

fontes_pagadoras$X5 <- 
  ifelse(fontes_pagadoras$X5 == fontes_pagadoras$X4, NA, fontes_pagadoras$X5)
fontes_pagadoras$X4 <- 
  ifelse(fontes_pagadoras$X4 == fontes_pagadoras$X3, NA, fontes_pagadoras$X4)
fontes_pagadoras$X3 <- 
  ifelse(fontes_pagadoras$X3 == fontes_pagadoras$X2, NA, fontes_pagadoras$X3)
fontes_pagadoras$X2 <- 
  ifelse(fontes_pagadoras$X2 == fontes_pagadoras$X1, NA, fontes_pagadoras$X2)

for(i in 1:ncol(fontes_pagadoras)) { 
  
  Encoding(fontes_pagadoras[,i]) <- "latin1"
  
  fontes_pagadoras[,i] <-
    substring(text = fontes_pagadoras[,i], first = 5)
  
  fontes_pagadoras[,i] <-
    gsub(pattern = " PGTO", replacement = "", fontes_pagadoras[,i])

  fontes_pagadoras[,i] <-
    gsub(pattern = " PTGO", replacement = "", fontes_pagadoras[,i])
  
  fontes_pagadoras[,i] <-
    gsub(pattern = " PC", replacement = "", fontes_pagadoras[,i])
  
  fontes_pagadoras[,i] <-
    gsub(pattern = "AC ", replacement = "", fontes_pagadoras[,i])
  
  fontes_pagadoras[,i] <-
    gsub(pattern = "-", replacement = "", fontes_pagadoras[,i])
  
  } 

rm(i)
    
fontes <- gather(fontes_pagadoras, key = "VAR", value = "PLANO")
glimpse(fontes)

# tabela_planos <- 
#   fontes %>%
#   group_by(PLANO) %>%
#   summarise(N = n()) %>%
#   arrange(desc(N))
# 
# write_csv2(tabela_planos, "planos_saude.csv")

fontes <- fontes %>% left_join(de_para, by = c("PLANO" = "Fonte_Pagadora"))
glimpse(fontes)                     

fontes %>% group_by(Segmento) %>% summarise(N= n()) %>% arrange(desc(N))

###########################
### PERFIL DOS CLIENTES ###
###########################

df_clientes <- 
  df %>%
  select(CPFPaciente, DataNascimento, Sexo, Uf) %>%
  distinct()

df_clientes %>% 
  mutate(Sexo = factor(Sexo)) %>%
  filter(Sexo %in% c("Feminino", "Masculino")) %>%
  group_by(Sexo) %>%
  summarise(N = n()) %>%
  ggplot(aes(x = Sexo, y = N)) +
  geom_col() + 
  theme_minimal()

df_clientes %>% 
  mutate(UF = factor(Uf)) %>%
  group_by(UF) %>%
  summarise(N = n()) %>%
  print(n = 60)

df_clientes %>% 
  mutate(UF = factor(Uf)) %>%
  group_by(UF) %>%
  summarise(N = n()) %>%
  ggplot(aes(x = UF, y = N)) +
  geom_col() + 
  theme_minimal()

df_clientes2 <- 
  df_clientes %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  select(Sexo, UF= Uf, Idade)

# write_csv2(df_clientes2, "perfil_clientes.csv")  

df %>%
  group_by(CPFPaciente) %>%
  dplyr::summarise(N = n()) %>%
  group_by(N) %>%
  dplyr::summarise(n = n()) %>%
  print(n= 100)

summary(df$ValorTotalPago)

df %>% 
  group_by(CPFPaciente) %>%
  summarise(ValorTotalPago = sum(ValorTotalPago, na.rm = T)) %>%
  select(ValorTotalPago) %>%
  summary()
  
##############################
### ATENDIMENTO / UNIDADES ###
##############################

unidades <- 
  df %>%
  group_by(UnidadeColeta) %>%
  dplyr::distinct(CPFPaciente) %>%
  summarise(N=n()) %>%
  arrange(desc(N)) 
# write_csv(t, "teste.csv")

#####################
### CLUSTER - PAM ###
#####################

base_cluster <- df_clientes[!duplicated(df_clientes$CPFPaciente), ]

frequencia <- 
  df %>%
  group_by(CPFPaciente) %>%
  dplyr::summarise(N = n())

valor <- 
  df %>%
  group_by(CPFPaciente) %>%
  dplyr::summarise(VALOR = sum(ValorTotalPago, na.rm = T))

base_cluster <- 
  df_clientes %>% 
  left_join(frequencia, by = "CPFPaciente") %>%
  left_join(valor, by = "CPFPaciente") %>%
  filter(is.na(CPFPaciente) == FALSE)
  
base_cluster <- 
  base_cluster  %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  mutate(Sexo = ifelse(Sexo == "Feminino", "F", 
                       ifelse(Sexo == "Masculino", "M", NA))) %>%
  mutate(UF = ifelse(Uf %in% c("DF", "DISTRITO FEDERAL", "BRASILIA", "BRASILIA DF",
                               "BRASILIA-DF", "Distrito Federal", "GUARA II",
                               "ASA SUL", "BRAS\xcdLIA"), "DF", 
                     ifelse(is.na(Uf) == TRUE, NA, "OUTRO")))
  

base_cluster <- 
  base_cluster %>%
  select(-DataNascimento, -Data_Nasc, -Uf,
         CPFPaciente, Sexo, Frequencia = N, Valor = VALOR, Idade, UF)

base_cluster <- 
  base_cluster %>%
  mutate(Sexo = factor(Sexo),
         UF = factor(UF))

rm(df, df_clientes, de_para, frequencia, valor, unidades, fontes, fontes_pagadoras)

base_cluster <- base_cluster[complete.cases(base_cluster),]

flag <- sample(base_cluster$CPFPaciente, size = nrow(base_cluster)*0.025, replace = FALSE)

base_cluster <- base_cluster[base_cluster$CPFPaciente %in% flag,]

# Calculando a distÃ¢ncia de Gower
gower_dist <- daisy(base_cluster[, -1],
                    metric = "gower",
                    type = list(logratio = 3))

summary(gower_dist)

gower_mat <- as.matrix(gower_dist)
# Output most similar pair
base_cluster[
  which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
        arr.ind = TRUE)[1, ], ]

# Calculate silhouette width for many k using PAM
sil_width <- c(NA)
for(i in 2:10){
  
  pam_fit <- pam(gower_dist,
                 diss = TRUE,
                 k = i)
  
  sil_width[i] <- pam_fit$silinfo$avg.width
  
}
# Plot sihouette width (higher is better)
plot(1:10, sil_width,
     xlab = "Number of clusters",
     ylab = "Silhouette Width")
lines(1:10, sil_width)

pam_fit <- pam(gower_dist, diss = TRUE, k = 4)
pam_results <- base_cluster %>%
  dplyr::select(-CPFPaciente) %>%
  mutate(cluster = pam_fit$clustering) %>%
  group_by(cluster) %>%
  do(the_summary = summary(.))
pam_results$the_summary

base_cluster[pam_fit$medoids, ]

tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
  data.frame() %>%
  setNames(c("X", "Y")) %>%
  mutate(cluster = factor(pam_fit$clustering),
         name = base_cluster$CPFPaciente)
ggplot(aes(x = X, y = Y), data = tsne_data) +
  geom_point(aes(color = cluster))

###############
### AMOSTRA ###
###############

df$fonte <- fontes_pagadoras$X1

df <- df %>% left_join(de_para, by = c("fonte" = "Fonte_Pagadora"))
glimpse(df)   

df <- df[!duplicated(df$CPFPaciente), ]

df <- 
  df  %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  mutate(Sexo = ifelse(Sexo == "Feminino", "F", 
                       ifelse(Sexo == "Masculino", "M", NA))) %>%
  mutate(UF = ifelse(Uf %in% c("DF", "DISTRITO FEDERAL", "BRASILIA", "BRASILIA DF",
                               "BRASILIA-DF", "Distrito Federal", "GUARA II",
                               "ASA SUL", "BRAS\xcdLIA"), "DF", 
                     ifelse(is.na(Uf) == TRUE, NA, "OUTRO")))

df <- 
  df %>% 
  select(-CodigoOs, -DataOs, -Solicitante, -Mnemonico, -fonte, -Data_Nasc, -UnidadeColeta,
         -FontePagadora,-TipoPagamento,-ValorTotalPago,-Uf, -IdPaciente,-Qtde)

df <-
  df %>% 
  filter(Idade >= 35, Idade <= 50, is.na(CPFPaciente) == FALSE,
         is.na(UF) == FALSE, Sexo %in% c("F","M"), 
         Segmento %in% c("Particular","Empresa","Popular"))

set.seed(1234)
amostra <- df %>%
  group_by(Sexo, UF, Segmento) %>%
  sample_n(1000)

write_csv2(amostra, "amostra.csv")

##############
### EXAMES ###
##############

exames <- 
  sem_covid %>% 
  select(Mnemonico) 

exames2 <- as.data.frame(unlist(strsplit(exames$Mnemonico, ",")))

exames3 <- table(exames2)

exames2 %>%
  group_by(Exame = `unlist(strsplit(exames$Mnemonico, ","))`) %>%
  summarise(N = n()) %>%
  arrange(desc(N))

# write_csv2(as.data.frame(exames3), "exames.csv") 

exames_paciente <- 
  df %>%
  group_by(CPFPaciente, CodigoOs) %>%
  summarise(exames = sum(grepl(",",Mnemonico)+1, na.rm = T))

summary(exames_paciente$exames)

exames_freq <- 
  df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016) %>%
  select(Mnemonico) %>%
  separate_rows(Mnemonico, sep = ",")

# glimpse(exames_freq)

exames_freq %>%
  group_by(Mnemonico) %>%
  summarise(N = n()) %>%
  filter(Mnemonico != "NA") %>%
  arrange(desc(N)) %>% print(n = 50)

rm(list = ls(pattern = "exames_"))  

# exames <- 
#   data.frame(do.call('rbind', 
#                      strsplit(as.character(exames$Mnemonico),
#                               ',',fixed=FALSE)))
# glimpse(exames)
# 
# exames <- apply(exames, 1, function(x) unique(x))

# apply(df1, 1, function(x) unique(x))

# 
# exames2 <- gather(exames, key = "VAR", value = "EXAME")
# glimpse(exames2)
# 
# exames3 <- 
#   exames2 %>% 
#   filter(is.na(EXAME) == FALSE) %>%
#   group_by(EXAME) %>%
#   summarise(N = n()) %>%
#   arrange(desc(N)) 
  
# write_csv2(exames3, "exames.csv") 

#######################
### PEDIDOS MÃDICOS ###
#######################

df %>% group_by(Solicitante) %>% summarise(N = n()) %>% arrange(desc(N))

sem_covid <- 
  df %>% 
  filter(!grepl("COV",Mnemonico),grepl("Sem solicita", Solicitante))

sem_covid %>%
  group_by(Solicitante) %>% 
  summarise(N = n()) %>% 
  arrange(desc(N))

com_covid <- 
  df %>% 
  filter(grepl("COV",Mnemonico))

com_covid %>%
  group_by(Solicitante) %>% 
  summarise(N = n()) %>% 
  arrange(desc(N))


##################
### CORRELAÃÃO ###
##################

base <- frequencia %>% left_join(valor, by = "CPFPaciente")

base %>%
  ggplot(aes(x = N, y = VALOR)) +
  geom_point() +
  xlab("FrequÃªncia") +
  ylab("Valor") +
  theme_minimal() 

###########
### RFM ###
###########

base_rfm <- 
  df %>%
  select(ID = IdPaciente, Data = DataOs, Valor = ValorTotalPago) %>%
  mutate(Data = as.Date(Data, format = "%d/%m/%Y")) %>%
  drop_na(ID) %>%
  filter(Valor > 0, year(Data) <= 2021, year(Data) >= 2017)

rfm_result <- rfm_table_order(
  data = base_rfm,
  customer_id = ID,
  revenue = Valor,
  order_date = Data, 
  analysis_date = as.Date("2021/08/01") 
)   

summary(rfm_result)

# RESULTADOS #

rfm_heatmap(rfm_result) + 
  ylab("RecÃªncia") + xlab("FrequÃªncia") + ggtitle("Mapa de Calor RFV") + 
  guides(fill=guide_legend(title="Valor MÃ©dio"))

rfm_bar_chart(rfm_result)

rfm_histograms(rfm_result)
rfm_order_dist(rfm_result)
rfm_rm_plot(rfm_result)

rfm_fm_plot(rfm_result) +  scale_y_log10() +  scale_x_log10() +  theme_light() 

rfm_rf_plot(rfm_result)

# We label the various segments
segment_names <- c("Champions", "Loyal Customers", "Potential Loyalist",
                   "New Customers", "Promising", "Need Attention", "About To Sleep",
                   "At Risk", "Can't Lose Them", "Lost")

# We set the upper and lower bounds for recency, frequency, and monetary for the above segments
recency_lower <- c(4, 2, 3, 4, 3, 2, 2, 1, 1, 1)
recency_upper <- c(5, 5, 5, 5, 4, 3, 3, 2, 1, 2)
frequency_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
frequency_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)
monetary_lower <- c(4, 3, 1, 1, 1, 2, 1, 2, 4, 1)
monetary_upper <- c(5, 5, 3, 1, 1, 3, 2, 5, 5, 2)

# We use the segments and the bounds we previously established to group our users into different segments
segment <- rfm_segment(rfm_result,
                       segment_names,
                       recency_lower,
                       recency_upper,
                       frequency_lower, 
                       frequency_upper, 
                       monetary_lower,
                       monetary_upper)

rfm_plot_median_recency(segment) + xlab("") + ylab("RecÃªncia Mediana") + ggtitle("RecÃªncia por Segmento") + theme_light() + theme(plot.title = element_text(hjust = 0.5))  

rfm_plot_median_monetary(segment) + xlab("") + ylab("Valor Mediano") + ggtitle("Valor por Segmento") + theme_light() + theme(plot.title = element_text(hjust = 0.5))  

segmentos <- 
  df %>%
  inner_join(segment, by = c("IdPaciente" = "customer_id"))

glimpse(segmentos)

segmentos %>%
  select(CPFPaciente, segment) %>%
  group_by(CPFPaciente) %>%
  distinct() %>%
  group_by(segment) %>%
  summarise(N = n()) %>%
  arrange(desc(N)) 

### CHAMPIONS ###

champions <- segmentos %>% filter(segment == "Champions")
glimpse(champions)  

champions_2 <- champions %>%
  select(CPFPaciente, DataNascimento, Sexo, Uf) %>%
  distinct()

champions_2 %>%
  group_by(Sexo) %>%
  summarise(N = n())

champions_2 %>%
  group_by(UF = Uf) %>%
  summarise(N = n()) %>%
  print(n = 35)

champions_2 %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  select(Idade) %>%
  summary()

champions_2 %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  ggplot(aes(Idade)) +
  geom_boxplot(fill = "steelblue") + 
  ggtitle("Idade Champions") + 
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5)) 

exames <- 
  champions %>% 
  select(CPFPaciente,Mnemonico) 

write_csv2(exames, "exames_champions.csv")

# exames2 <- as.data.frame(unlist(strsplit(exames$Mnemonico, ",")))
# 
# exames3 <- table(exames2)
# 
# write_csv2(as.data.frame(exames3), "exames_champions.csv")

#############
### PRIME ###
#############

df %>%
  filter(stringr::str_starts(CodigoOs,"419")|
           stringr::str_detect(UnidadeColeta, pattern = "PRIME"))

##############
### COHORT ###
##############

df %>% 
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016) %>%
  mutate(Sexo = factor(Sexo)) %>%
  filter(Sexo %in% c("Feminino", "Masculino")) %>%
  group_by(Ano = year(Data), Sexo) %>%
  summarise(N =n()) %>%
  ggplot(aes(x = Ano, y = N, fill = Sexo)) +
  geom_col(position = "dodge") + 
  theme_minimal()
  
df %>% 
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016) %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  group_by(Ano = year(Data)) %>%
  summarise(Idade = mean(Idade, na.rm = T)) %>%
  ggplot(aes(x = Ano, y = Idade)) +
  geom_col(fill = "steelblue") +
  ylab("Idade MÃ©dia") + 
  theme_minimal()

unique(df$Uf)
df %>% 
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016) %>%
  mutate(UF = ifelse(Uf %in% c("DF", "DISTRITO FEDERAL", "Distrito Federal",
                               "BRASILIA DF","BRAS\xcdLIA","GUARA II",
                               "BRASILIA-DF","BRASILIA","ASA SUL"), "DF",
                     ifelse(is.na(Uf) == TRUE,NA,
                            ifelse(Uf %in% c("","ME"),NA,"FORA DF")))) %>%
  group_by(Ano = year(Data), UF) %>%
  summarise(N = n()) %>%
  filter(is.na(UF) == FALSE) %>%
  ggplot(aes(x = Ano, y = N, fill = UF)) +
  geom_col(position = "dodge") +
  theme_minimal()  

df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016) %>%
  group_by(Ano = year(Data)) %>%
  summarise(exames = sum(grepl(",",Mnemonico)+1, na.rm = T),
            N = n()) %>%
  mutate(Exames = exames/N) %>%
  ggplot(aes(x = Ano, y = Exames)) +
  geom_col(fill = "dark red") +
  ylab("MÃ©dia de Exames") + 
  theme_minimal()

df %>%
  mutate()
  grepl("Sem solicita", Solicitante)
  
# Exames por Ano #

exames_2021 <- 
  df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) == 2021) %>%
  select(Mnemonico) %>%
  separate_rows(Mnemonico, sep = ",")

# glimpse(exames_2021)

exames_2021 %>%
  group_by(Mnemonico) %>%
  summarise(N = n()) %>%
  filter(Mnemonico != "NA") %>%
  arrange(desc(N))
  
rm(list = ls(pattern = "exames_"))  

# Exames mais frequentes por Sexo #

exames_fem <- 
  df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016, Sexo == "Feminino") %>%
  select(Mnemonico) %>%
  separate_rows(Mnemonico, sep = ",")

exames_fem %>%
  group_by(Mnemonico) %>%
  summarise(N = n()) %>%
  filter(Mnemonico != "NA") %>%
  arrange(desc(N))

exames_masc <- 
  df %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016, Sexo == "Masculino") %>%
  select(Mnemonico) %>%
  separate_rows(Mnemonico, sep = ",")

exames_masc %>%
  group_by(Mnemonico) %>%
  summarise(N = n()) %>%
  filter(Mnemonico != "NA") %>%
  arrange(desc(N))

rm(list = ls(pattern = "exames_"))   

# Pedido MÃ©dico #

df %>% 
  filter(Solicitante != "") %>%
  mutate(Pedido_Medico = !str_detect(string = Solicitante, pattern = "olicit")) %>%
  mutate(Data = as.Date(DataOs, format = "%d/%m/%Y")) %>%
  filter(year(Data) > 2016) %>%
  mutate(Data_Nasc = as.Date(DataNascimento, format = "%d/%m/%Y")) %>%
  mutate(Idade = as.period(interval(start = Data_Nasc, end = Sys.Date()))$year) %>%
  group_by(Ano = year(Data)) %>%
  summarise(Exames_com_Pedido = mean(Pedido_Medico, na.rm = T)) %>%
  ggplot(aes(x = Ano, y = Exames_com_Pedido)) +
  geom_col(fill = "dark red") +
  ylab("% Exames c/ Pedido") + 
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) + 
  theme_minimal()

########################
### CLUSTER - KMEANS ###
########################

# Valor, Quantidade de Exames, Frequencia #

frequencia <- 
  df %>%
  group_by(CPFPaciente) %>%
  dplyr::summarise(N = n())

valor <- 
  df %>%
  group_by(CPFPaciente) %>%
  dplyr::summarise(VALOR = sum(ValorTotalPago, na.rm = T))

qtde_exames <- 
  df %>%
  group_by(CPFPaciente) %>%
  summarise(exames = sum(grepl(",",Mnemonico)+1, na.rm = T))
  
base_cluster <- 
  frequencia %>%
  left_join(valor, by = "CPFPaciente") %>%
  left_join(qtde_exames, by = "CPFPaciente")

# Standardize the data
base_cluster <- scale(base_cluster[-1])
head(base_cluster)

# Elbow method

fviz_nbclust(base_cluster, kmeans, method = "wss") +
  geom_vline(xintercept = 4, linetype = 2)+
  labs(subtitle = "Elbow method")

# Silhouette method
fviz_nbclust(base_cluster, kmeans, method = "silhouette")+
  labs(subtitle = "Silhouette method")

# Gap statistic
# nboot = 50 to keep the function speedy. 
# recommended value: nboot= 500 for your analysis.
# Use verbose = FALSE to hide computing progression.
set.seed(123)
fviz_nbclust(base_cluster, kmeans, nstart = 25,  method = "gap_stat", nboot = 50)+
  labs(subtitle = "Gap statistic method")
